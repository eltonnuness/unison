/*
 * UNISoNMain.java
 *
 * Created on 13 October 2007, 21:52
 */

package uk.co.sleonard.unison.gui.generated;

// <editor-fold defaultstate="collapsed" desc=" imports ">

import java.awt.Dimension;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.Iterator;
import java.util.List;
import java.util.ListIterator;
import java.util.Set;
import java.util.Vector;

import javax.swing.ComboBoxModel;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.ListModel;
import javax.swing.SpinnerDateModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreePath;

import org.apache.log4j.Logger;
import org.hibernate.ObjectNotFoundException;
import org.hibernate.Query;
import org.hsqldb.util.DatabaseManagerSwing;

import uk.co.sleonard.unison.datahandling.DatabaseConnection;
import uk.co.sleonard.unison.datahandling.HibernateHelper;
import uk.co.sleonard.unison.datahandling.StringUtils;
import uk.co.sleonard.unison.datahandling.DAO.Location;
import uk.co.sleonard.unison.datahandling.DAO.Message;
import uk.co.sleonard.unison.datahandling.DAO.NewsGroup;
import uk.co.sleonard.unison.datahandling.DAO.Topic;
import uk.co.sleonard.unison.datahandling.DAO.UsenetUser;
import uk.co.sleonard.unison.gui.GUIItem;
import uk.co.sleonard.unison.gui.SimpleFileFilter;
import uk.co.sleonard.unison.gui.TreeNode;
import uk.co.sleonard.unison.gui.UNISoNController;
import uk.co.sleonard.unison.gui.UNISoNController.MatrixType;
import uk.co.sleonard.unison.output.OutputFile;
import uk.co.sleonard.unison.output.PajekNetworkFile;

// </editor-fold>

/**
 * 
 * @author steve
 */
public class UNISoNFrame extends javax.swing.JFrame {

	private UNISoNController controller;

	/** Creates new form UNISoNMain */
	public UNISoNFrame(final UNISoNController controller) {
		this.controller = controller;

		initComponents();

		// My custom part

		newsgroupDropDown.setEditable(true);

		topGroupsTable.getSelectionModel().addListSelectionListener(
				new ListSelectionListener() {
					public void valueChanged(
							ListSelectionEvent listSelectionEvent) {

						GUIItem<NewsGroup> item = (GUIItem<NewsGroup>) topGroupsTable
								.getModel().getValueAt(
										topGroupsTable.getSelectedRow(), 0);
						controller.setSelectedNewsgroup(item.getItem());
						logger.debug("top groups valueChanged : "
								+ item.toString());

					}
				});

		resultsTable.getSelectionModel().addListSelectionListener(
				new ListSelectionListener() {
					public void valueChanged(
							ListSelectionEvent listSelectionEvent) {

						TableModel model = resultsTable.getModel();

						GUIItem<Message> item = (GUIItem<Message>) model
								.getValueAt(resultsTable.getSelectedRow(), 1);
						controller.setSelectedMessage(item.getItem());
						logger.debug("results valueChanged : "
								+ item.toString());

					}
				});

	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	// <editor-fold defaultstate="collapsed" desc=" Generated Code
	// <editor-fold defaultstate="collapsed" desc=" Generated Code
	// ">//GEN-BEGIN:initComponents
	private void initComponents() {
		aboutDialog = new javax.swing.JDialog();
		jLabel1 = new javax.swing.JLabel();
		jLabel2 = new javax.swing.JLabel();
		closeABoutButton = new javax.swing.JButton();
		jLabel3 = new javax.swing.JLabel();
		jLabel4 = new javax.swing.JLabel();
		jLabel5 = new javax.swing.JLabel();
		jLabel6 = new javax.swing.JLabel();
		jLabel7 = new javax.swing.JLabel();
		newsgroupPopupMenu = new javax.swing.JPopupMenu();
		selectGroupMenuItem = new javax.swing.JMenuItem("Connect to ");
		showAsCreatorReplierMenuItem = new javax.swing.JMenuItem();
		showAsLastVsReplierMenuItem = new javax.swing.JMenuItem();
		showAllSoFarMenuItem = new javax.swing.JMenuItem();
		matrixGroup = new javax.swing.ButtonGroup();
		topicScrollPane = new javax.swing.JScrollPane();
		topicRoot = new TreeNode(null, "Topics");
		topicMessageHierarchy = new javax.swing.JTree(topicRoot);
		subjectField = new javax.swing.JTextField();
		subjectLabel = new javax.swing.JLabel();
		senderLabel = new javax.swing.JLabel();
		dateLabel = new javax.swing.JLabel();
		senderField = new javax.swing.JTextField();
		dateField = new javax.swing.JTextField();
		newsgroupScrollPane = new javax.swing.JScrollPane();
		newsgroupTreeRoot = new TreeNode(null,
				"NewsGroups                                 ");
		newsGroupHiearchy = new javax.swing.JTree(newsgroupTreeRoot);
		crossPostingScrollPane = new javax.swing.JScrollPane();
		crossPostingsList = new javax.swing.JList();
		messageBodyScrollPane = new javax.swing.JScrollPane();
		messageBodyTextArea = new javax.swing.JTextArea();
		hostLabel = new javax.swing.JLabel();
		String[] hosts = new String[] { "freetext.usenetserver.com" };

		javax.swing.SpinnerListModel hostsList = new javax.swing.SpinnerListModel(
				hosts);
		hostChooser = new javax.swing.JSpinner(hostsList);
		newsgroupLabel = new javax.swing.JLabel();
		newsgroupDropDown = new javax.swing.JComboBox();
		connectButton = new javax.swing.JButton();
		downloadButton = new javax.swing.JButton();
		pauseButton = new javax.swing.JButton();
		crosspostedGroupsLabel = new javax.swing.JLabel();
		timeLeftField = new javax.swing.JTextField();
		cancelButton = new javax.swing.JButton();
		timeLeftLabel = new javax.swing.JLabel();
		downloadProgressBar = new javax.swing.JProgressBar();
		showUserButton = new javax.swing.JButton();
		statsTabbedPane = new javax.swing.JTabbedPane();
		topGroupsScrollPane = new javax.swing.JScrollPane();
		topGroupsTable = new javax.swing.JTable();
		topPostersScrollPane = new javax.swing.JScrollPane();
		topPostersTable = new javax.swing.JTable();
		resultsTabbedPane = new javax.swing.JTabbedPane();
		graphicPanel = new javax.swing.JPanel();
		resultsTableScrollPane = new javax.swing.JScrollPane();
		resultsTable = new javax.swing.JTable();
		refreshDataButton = new javax.swing.JButton();
		saveToPajekButton = new javax.swing.JButton();
		dateFromLabel = new javax.swing.JLabel();
		dateToLabel = new javax.swing.JLabel();
		countriesLabel = new javax.swing.JLabel();
		postersLabel = new javax.swing.JLabel();
		messageArea = new javax.swing.JTextField();
		matrixFirstCurrent = new javax.swing.JRadioButton();
		matrixLastCurrent = new javax.swing.JRadioButton();
		matrixAllCurrent = new javax.swing.JRadioButton();
		toDateSpinner = new javax.swing.JSpinner();
		fromDateSpinner = new javax.swing.JSpinner();
		jScrollPane1 = new javax.swing.JScrollPane();
		countryList = new javax.swing.JList();
		jScrollPane2 = new javax.swing.JScrollPane();
		postersList = new javax.swing.JList();
		filterButton = new javax.swing.JButton();
		menuBar = new javax.swing.JMenuBar();
		fileMenu = new javax.swing.JMenu();
		dbMagrMenuItem = new javax.swing.JMenuItem();
		reloadDataMenuItem = new javax.swing.JMenuItem();
		jSeparator2 = new javax.swing.JSeparator();
		exitMenuItem = new javax.swing.JMenuItem();
		helpMenu = new javax.swing.JMenu();
		deleteDBMenuItem = new javax.swing.JMenuItem();
		jSeparator1 = new javax.swing.JSeparator();
		aboutMenuItem = new javax.swing.JMenuItem();

		aboutDialog.setResizable(false);
		jLabel1.setFont(new java.awt.Font("Dialog", 1, 18));
		jLabel1.setText("UNISoN ");

		jLabel2.setText("Author : Steve Leonard 2007 ");

		closeABoutButton.setText("Close");
		closeABoutButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				closeABoutButtonActionPerformed(evt);
			}
		});

		jLabel3.setText("created for a university project part of an ");

		jLabel4.setText("MSc in Business Systems Analysis & Design");

		jLabel5.setText("at City University, London");

		jLabel6.setFont(new java.awt.Font("Dialog", 1, 14));
		jLabel6.setText("UseNet Incorporates Social Networks");

		jLabel7.setText("http://unison.sleonard.co.uk");

		org.jdesktop.layout.GroupLayout aboutDialogLayout = new org.jdesktop.layout.GroupLayout(
				aboutDialog.getContentPane());
		aboutDialog.getContentPane().setLayout(aboutDialogLayout);
		aboutDialogLayout
				.setHorizontalGroup(aboutDialogLayout
						.createParallelGroup(
								org.jdesktop.layout.GroupLayout.LEADING)
						.add(
								aboutDialogLayout.createSequentialGroup().add(
										78, 78, 78).add(jLabel5)
										.addContainerGap(80, Short.MAX_VALUE))
						.add(
								aboutDialogLayout
										.createSequentialGroup()
										.add(
												aboutDialogLayout
														.createParallelGroup(
																org.jdesktop.layout.GroupLayout.TRAILING)
														.add(
																org.jdesktop.layout.GroupLayout.LEADING,
																aboutDialogLayout
																		.createSequentialGroup()
																		.add(
																				25,
																				25,
																				25)
																		.add(
																				aboutDialogLayout
																						.createParallelGroup(
																								org.jdesktop.layout.GroupLayout.LEADING)
																						.add(
																								aboutDialogLayout
																										.createSequentialGroup()
																										.add(
																												jLabel1)
																										.addPreferredGap(
																												org.jdesktop.layout.LayoutStyle.RELATED,
																												106,
																												Short.MAX_VALUE))
																						.add(
																								jLabel2))
																		.addPreferredGap(
																				org.jdesktop.layout.LayoutStyle.RELATED)
																		.add(
																				closeABoutButton))
														.add(
																org.jdesktop.layout.GroupLayout.LEADING,
																aboutDialogLayout
																		.createSequentialGroup()
																		.add(
																				41,
																				41,
																				41)
																		.add(
																				jLabel6))
														.add(
																aboutDialogLayout
																		.createSequentialGroup()
																		.addContainerGap()
																		.add(
																				aboutDialogLayout
																						.createParallelGroup(
																								org.jdesktop.layout.GroupLayout.LEADING)
																						.add(
																								jLabel3)
																						.add(
																								jLabel4))))
										.addContainerGap(
												org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
												Short.MAX_VALUE)).add(
								aboutDialogLayout.createSequentialGroup().add(
										82, 82, 82).add(jLabel7)
										.addContainerGap(59, Short.MAX_VALUE)));
		aboutDialogLayout
				.setVerticalGroup(aboutDialogLayout
						.createParallelGroup(
								org.jdesktop.layout.GroupLayout.LEADING)
						.add(
								aboutDialogLayout
										.createSequentialGroup()
										.add(23, 23, 23)
										.add(jLabel1)
										.addPreferredGap(
												org.jdesktop.layout.LayoutStyle.RELATED)
										.add(jLabel6)
										.add(28, 28, 28)
										.add(jLabel7)
										.addPreferredGap(
												org.jdesktop.layout.LayoutStyle.RELATED,
												org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
												Short.MAX_VALUE)
										.add(jLabel3)
										.addPreferredGap(
												org.jdesktop.layout.LayoutStyle.RELATED)
										.add(jLabel4)
										.addPreferredGap(
												org.jdesktop.layout.LayoutStyle.RELATED)
										.add(jLabel5)
										.add(28, 28, 28)
										.add(
												aboutDialogLayout
														.createParallelGroup(
																org.jdesktop.layout.GroupLayout.TRAILING)
														.add(jLabel2)
														.add(closeABoutButton))
										.add(28, 28, 28)));
		selectGroupMenuItem.setText("Connect to this newsgroup");
		selectGroupMenuItem
				.addActionListener(new java.awt.event.ActionListener() {
					public void actionPerformed(java.awt.event.ActionEvent evt) {
						selectGroupMenuItemActionPerformed(evt);
					}
				});

		newsgroupPopupMenu.add(selectGroupMenuItem);

		showAsCreatorReplierMenuItem
				.setText("Show Topic Creator vs Current Message Poster Matrix");
		showAsCreatorReplierMenuItem
				.addActionListener(new java.awt.event.ActionListener() {
					public void actionPerformed(java.awt.event.ActionEvent evt) {
						showAsCreatorReplierMenuItemActionPerformed(evt);
					}
				});

		newsgroupPopupMenu.add(showAsCreatorReplierMenuItem);

		showAsLastVsReplierMenuItem
				.setText("Show Last Message Poster vs Current Message Poster Matrix");
		showAsLastVsReplierMenuItem
				.addActionListener(new java.awt.event.ActionListener() {
					public void actionPerformed(java.awt.event.ActionEvent evt) {
						showAsLastVsReplierMenuItemActionPerformed(evt);
					}
				});

		newsgroupPopupMenu.add(showAsLastVsReplierMenuItem);

		showAllSoFarMenuItem
				.setText("Show all previous posters in topic matrix");
		showAllSoFarMenuItem
				.addActionListener(new java.awt.event.ActionListener() {
					public void actionPerformed(java.awt.event.ActionEvent evt) {
						showAllSoFarMenuItemActionPerformed(evt);
					}
				});

		newsgroupPopupMenu.add(showAllSoFarMenuItem);

		setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
		setTitle("UNISoN");
		topicMessageHierarchy
				.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
					public void valueChanged(
							javax.swing.event.TreeSelectionEvent evt) {
						topicMessageHierarchyValueChanged(evt);
					}
				});

		topicScrollPane.setViewportView(topicMessageHierarchy);

		subjectField.setEditable(false);

		subjectLabel.setText("Subject");

		senderLabel.setText("Sender");

		dateLabel.setText("Sent Date");

		senderField.setEditable(false);

		dateField.setEditable(false);

		newsGroupHiearchy
				.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
					public void valueChanged(
							javax.swing.event.TreeSelectionEvent evt) {
						newsGroupHiearchyValueChanged(evt);
					}
				});
		newsGroupHiearchy.addMouseListener(new java.awt.event.MouseAdapter() {
			public void mousePressed(java.awt.event.MouseEvent evt) {
				newsGroupHiearchyMousePressed(evt);
			}
		});

		newsgroupScrollPane.setViewportView(newsGroupHiearchy);

		crossPostingsList.setModel(getCrossPostsModel(controller
				.getSelectedMessage()));
		crossPostingsList
				.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
					public void valueChanged(
							javax.swing.event.ListSelectionEvent evt) {
						crossPostingsListValueChanged(evt);
					}
				});

		crossPostingScrollPane.setViewportView(crossPostingsList);

		messageBodyTextArea.setColumns(20);
		messageBodyTextArea.setEditable(false);
		messageBodyTextArea.setRows(5);
		messageBodyScrollPane.setViewportView(messageBodyTextArea);

		hostLabel.setText("Host");

		hostChooser.setToolTipText("Select the host from the list");

		newsgroupLabel.setText("Newsgroup");

		newsgroupDropDown.setModel(getNewsGroupList());
		newsgroupDropDown
				.addActionListener(new java.awt.event.ActionListener() {
					public void actionPerformed(java.awt.event.ActionEvent evt) {
						newsgroupDropDownActionPerformed(evt);
					}
				});

		connectButton.setText("Connect ");
		connectButton.setToolTipText("Connect to the selected newsgroup");
		connectButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				connectButtonActionPerformed(evt);
			}
		});

		downloadButton.setText("Download");
		downloadButton
				.setToolTipText("Download messages from chosen newsgroup");
		downloadButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				downloadButtonActionPerformed(evt);
			}
		});

		pauseButton.setText("Pause");
		pauseButton.setToolTipText("Pause download");
		pauseButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				pauseButtonActionPerformed(evt);
			}
		});

		crosspostedGroupsLabel.setText("Crossposted Newsgroups");

		timeLeftField.setEditable(false);

		cancelButton.setText("Cancel");
		cancelButton.setToolTipText("Cancel download");
		cancelButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				cancelButtonActionPerformed(evt);
			}
		});

		timeLeftLabel.setText("Time Left: ");

		showUserButton.setText("Show User");
		showUserButton
				.setToolTipText("Show user details:  name, email, location,");
		showUserButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				showUserButtonActionPerformed(evt);
			}
		});

		statsTabbedPane.setToolTipText("Shows the top posters");
		statsTabbedPane.setName("Top Posters");
		topGroupsTable.setModel(getTopGroupsModel());
		topGroupsScrollPane.setViewportView(topGroupsTable);

		statsTabbedPane.addTab("Top Groups", null, topGroupsScrollPane,
				"View the NewsGroups with most messages in the database");

		topPostersTable.setModel(getTopPostersModel());
		topPostersScrollPane.setViewportView(topPostersTable);

		statsTabbedPane.addTab("Top Posters", null, topPostersScrollPane,
				"View the Usenet posters with most messages in the database");

		statsTabbedPane.getAccessibleContext().setAccessibleName("Top Posters");

		graphicPanel.setToolTipText("Show preview of Data");
		org.jdesktop.layout.GroupLayout graphicPanelLayout = new org.jdesktop.layout.GroupLayout(
				graphicPanel);
		graphicPanel.setLayout(graphicPanelLayout);
		graphicPanelLayout.setHorizontalGroup(graphicPanelLayout
				.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
				.add(0, 441, Short.MAX_VALUE));
		graphicPanelLayout.setVerticalGroup(graphicPanelLayout
				.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
				.add(0, 223, Short.MAX_VALUE));
		resultsTabbedPane.addTab("Preview Pajek Graph", null, graphicPanel,
				"See a preview graph of the Selected Pajek Data");

		resultsTable.setModel(getPajekMatrixModel());
		resultsTableScrollPane.setViewportView(resultsTable);

		resultsTabbedPane.addTab("Preview Pajek File", null,
				resultsTableScrollPane,
				"Preview the data that will be used to create the Pajek file");

		refreshDataButton.setText("Refresh Data");
		refreshDataButton
				.addActionListener(new java.awt.event.ActionListener() {
					public void actionPerformed(java.awt.event.ActionEvent evt) {
						refreshDataButtonActionPerformed(evt);
					}
				});

		saveToPajekButton.setText("Save to Pajek");
		saveToPajekButton
				.addActionListener(new java.awt.event.ActionListener() {
					public void actionPerformed(java.awt.event.ActionEvent evt) {
						saveToPajekButtonActionPerformed(evt);
					}
				});

		dateFromLabel.setText("From:");

		dateToLabel.setText("To:");

		countriesLabel.setText("Countries:");

		postersLabel.setText("Posters:");

		messageArea.setEditable(false);

		matrixGroup.add(matrixFirstCurrent);
		matrixFirstCurrent.setText("Topic creator/Current");
		matrixFirstCurrent.setBorder(javax.swing.BorderFactory
				.createEmptyBorder(0, 0, 0, 0));
		matrixFirstCurrent.setMargin(new java.awt.Insets(0, 0, 0, 0));

		matrixGroup.add(matrixLastCurrent);
		matrixLastCurrent.setSelected(true);
		matrixLastCurrent.setText("Last message/Current");
		matrixLastCurrent.setBorder(javax.swing.BorderFactory
				.createEmptyBorder(0, 0, 0, 0));
		matrixLastCurrent.setMargin(new java.awt.Insets(0, 0, 0, 0));

		matrixGroup.add(matrixAllCurrent);
		matrixAllCurrent.setText("All previous/Current");
		matrixAllCurrent.setBorder(javax.swing.BorderFactory.createEmptyBorder(
				0, 0, 0, 0));
		matrixAllCurrent.setMargin(new java.awt.Insets(0, 0, 0, 0));

		toDateSpinner.setModel(getDateModel(false));

		fromDateSpinner.setModel(getDateModel(true));

		countryList.setModel(getListModel(getListVector(
				UNISoNController.LOCATION, "country")));
		jScrollPane1.setViewportView(countryList);

		postersList
				.setModel(getListModel(getListVector(UNISoNController.USENETUSER)));
		jScrollPane2.setViewportView(postersList);

		filterButton.setText("  Apply Filter  ");
		filterButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				filterButtonActionPerformed(evt);
			}
		});

		fileMenu.setText("File");
		dbMagrMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(
				java.awt.event.KeyEvent.VK_SPACE,
				java.awt.event.InputEvent.CTRL_MASK));
		dbMagrMenuItem.setText("Database Manager");
		dbMagrMenuItem
				.setToolTipText("This brings up a GUI to view and edit the database directly");
		dbMagrMenuItem.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				dbMagrMenuItemActionPerformed(evt);
			}
		});

		fileMenu.add(dbMagrMenuItem);

		reloadDataMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(
				java.awt.event.KeyEvent.VK_R,
				java.awt.event.InputEvent.CTRL_MASK));
		reloadDataMenuItem.setText("Refresh Data");
		reloadDataMenuItem
				.setToolTipText("This reloads the data from the database");
		reloadDataMenuItem
				.addActionListener(new java.awt.event.ActionListener() {
					public void actionPerformed(java.awt.event.ActionEvent evt) {
						reloadDataMenuItemActionPerformed(evt);
					}
				});

		fileMenu.add(reloadDataMenuItem);

		fileMenu.add(jSeparator2);

		exitMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(
				java.awt.event.KeyEvent.VK_ESCAPE, 0));
		exitMenuItem.setText("Exit");
		exitMenuItem.setToolTipText("This closes the application");
		exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				exitMenuItemActionPerformed(evt);
			}
		});

		fileMenu.add(exitMenuItem);

		menuBar.add(fileMenu);

		helpMenu.setText("Help");
		deleteDBMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(
				java.awt.event.KeyEvent.VK_DELETE,
				java.awt.event.InputEvent.CTRL_MASK));
		deleteDBMenuItem.setText("Delete DB");
		deleteDBMenuItem.setToolTipText("Deletes ALL the data in the database");
		deleteDBMenuItem.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				deleteDBMenuItemActionPerformed(evt);
			}
		});

		helpMenu.add(deleteDBMenuItem);

		helpMenu.add(jSeparator1);

		aboutMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(
				java.awt.event.KeyEvent.VK_SLASH,
				java.awt.event.InputEvent.SHIFT_MASK
						| java.awt.event.InputEvent.CTRL_MASK));
		aboutMenuItem.setText("About UNISoN");
		aboutMenuItem.setToolTipText("Show details of this program's author");
		aboutMenuItem.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				aboutMenuItemActionPerformed(evt);
			}
		});

		helpMenu.add(aboutMenuItem);

		menuBar.add(helpMenu);

		setJMenuBar(menuBar);

		org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(
				getContentPane());
		getContentPane().setLayout(layout);
		layout
				.setHorizontalGroup(layout
						.createParallelGroup(
								org.jdesktop.layout.GroupLayout.LEADING)
						.add(
								org.jdesktop.layout.GroupLayout.TRAILING,
								layout
										.createSequentialGroup()
										.addContainerGap()
										.add(
												layout
														.createParallelGroup(
																org.jdesktop.layout.GroupLayout.LEADING)
														.add(
																org.jdesktop.layout.GroupLayout.TRAILING,
																layout
																		.createSequentialGroup()
																		.add(
																				layout
																						.createParallelGroup(
																								org.jdesktop.layout.GroupLayout.TRAILING)
																						.add(
																								layout
																										.createSequentialGroup()
																										.add(
																												newsgroupLabel)
																										.add(
																												16,
																												16,
																												16))
																						.add(
																								layout
																										.createSequentialGroup()
																										.add(
																												hostLabel,
																												org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
																												67,
																												org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
																										.addPreferredGap(
																												org.jdesktop.layout.LayoutStyle.RELATED)))
																		.add(
																				layout
																						.createParallelGroup(
																								org.jdesktop.layout.GroupLayout.LEADING,
																								false)
																						.add(
																								newsgroupDropDown,
																								0,
																								org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
																								Short.MAX_VALUE)
																						.add(
																								hostChooser,
																								org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
																								133,
																								Short.MAX_VALUE))
																		.addPreferredGap(
																				org.jdesktop.layout.LayoutStyle.RELATED)
																		.add(
																				layout
																						.createParallelGroup(
																								org.jdesktop.layout.GroupLayout.LEADING,
																								false)
																						.add(
																								layout
																										.createSequentialGroup()
																										.add(
																												connectButton)
																										.addPreferredGap(
																												org.jdesktop.layout.LayoutStyle.RELATED)
																										.add(
																												downloadButton)
																										.addPreferredGap(
																												org.jdesktop.layout.LayoutStyle.RELATED)
																										.add(
																												pauseButton)
																										.add(
																												6,
																												6,
																												6)
																										.add(
																												cancelButton))
																						.add(
																								layout
																										.createSequentialGroup()
																										.add(
																												timeLeftLabel)
																										.addPreferredGap(
																												org.jdesktop.layout.LayoutStyle.RELATED)
																										.add(
																												timeLeftField,
																												org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
																												115,
																												org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
																										.addPreferredGap(
																												org.jdesktop.layout.LayoutStyle.RELATED)
																										.add(
																												downloadProgressBar,
																												org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
																												org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
																												Short.MAX_VALUE)))
																		.add(
																				102,
																				102,
																				102))
														.add(
																layout
																		.createSequentialGroup()
																		.add(
																				layout
																						.createParallelGroup(
																								org.jdesktop.layout.GroupLayout.TRAILING,
																								false)
																						.add(
																								org.jdesktop.layout.GroupLayout.LEADING,
																								messageBodyScrollPane)
																						.add(
																								org.jdesktop.layout.GroupLayout.LEADING,
																								layout
																										.createSequentialGroup()
																										.add(
																												layout
																														.createParallelGroup(
																																org.jdesktop.layout.GroupLayout.TRAILING,
																																false)
																														.add(
																																newsgroupScrollPane)
																														.add(
																																org.jdesktop.layout.GroupLayout.LEADING,
																																layout
																																		.createSequentialGroup()
																																		.add(
																																				layout
																																						.createParallelGroup(
																																								org.jdesktop.layout.GroupLayout.LEADING)
																																						.add(
																																								crossPostingScrollPane,
																																								org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
																																								212,
																																								org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
																																						.add(
																																								crosspostedGroupsLabel))
																																		.addPreferredGap(
																																				org.jdesktop.layout.LayoutStyle.RELATED)
																																		.add(
																																				layout
																																						.createParallelGroup(
																																								org.jdesktop.layout.GroupLayout.LEADING)
																																						.add(
																																								senderLabel)
																																						.add(
																																								dateLabel)
																																						.add(
																																								subjectLabel))))
																										.addPreferredGap(
																												org.jdesktop.layout.LayoutStyle.RELATED)
																										.add(
																												layout
																														.createParallelGroup(
																																org.jdesktop.layout.GroupLayout.LEADING)
																														.add(
																																layout
																																		.createSequentialGroup()
																																		.add(
																																				layout
																																						.createParallelGroup(
																																								org.jdesktop.layout.GroupLayout.LEADING,
																																								false)
																																						.add(
																																								dateField)
																																						.add(
																																								senderField)
																																						.add(
																																								subjectField,
																																								org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
																																								205,
																																								Short.MAX_VALUE))
																																		.addPreferredGap(
																																				org.jdesktop.layout.LayoutStyle.RELATED)
																																		.add(
																																				layout
																																						.createParallelGroup(
																																								org.jdesktop.layout.GroupLayout.LEADING,
																																								false)
																																						.add(
																																								showUserButton,
																																								org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
																																								org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
																																								Short.MAX_VALUE)
																																						.add(
																																								saveToPajekButton,
																																								org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
																																								org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
																																								Short.MAX_VALUE)
																																						.add(
																																								refreshDataButton,
																																								org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
																																								123,
																																								Short.MAX_VALUE)))
																														.add(
																																topicScrollPane,
																																org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
																																333,
																																org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))))
																		.addPreferredGap(
																				org.jdesktop.layout.LayoutStyle.RELATED)))
										.addPreferredGap(
												org.jdesktop.layout.LayoutStyle.RELATED)
										.add(
												layout
														.createParallelGroup(
																org.jdesktop.layout.GroupLayout.LEADING)
														.add(
																layout
																		.createSequentialGroup()
																		.add(
																				layout
																						.createParallelGroup(
																								org.jdesktop.layout.GroupLayout.LEADING)
																						.add(
																								jScrollPane1,
																								org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
																								196,
																								org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
																						.add(
																								layout
																										.createSequentialGroup()
																										.add(
																												layout
																														.createParallelGroup(
																																org.jdesktop.layout.GroupLayout.LEADING)
																														.add(
																																dateFromLabel)
																														.add(
																																dateToLabel))
																										.addPreferredGap(
																												org.jdesktop.layout.LayoutStyle.RELATED)
																										.add(
																												layout
																														.createParallelGroup(
																																org.jdesktop.layout.GroupLayout.LEADING)
																														.add(
																																toDateSpinner,
																																org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
																																80,
																																org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
																														.add(
																																fromDateSpinner,
																																org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
																																82,
																																org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))))
																		.add(
																				14,
																				14,
																				14)
																		.add(
																				layout
																						.createParallelGroup(
																								org.jdesktop.layout.GroupLayout.LEADING)
																						.add(
																								matrixAllCurrent)
																						.add(
																								jScrollPane2,
																								org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
																								271,
																								org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
																						.add(
																								matrixLastCurrent)
																						.add(
																								matrixFirstCurrent)))
														.add(
																layout
																		.createSequentialGroup()
																		.add(
																				countriesLabel)
																		.addPreferredGap(
																				org.jdesktop.layout.LayoutStyle.RELATED)
																		.add(
																				filterButton)
																		.add(
																				20,
																				20,
																				20)
																		.add(
																				postersLabel))
														.add(
																layout
																		.createSequentialGroup()
																		.add(
																				20,
																				20,
																				20)
																		.add(
																				layout
																						.createParallelGroup(
																								org.jdesktop.layout.GroupLayout.TRAILING,
																								false)
																						.add(
																								layout
																										.createSequentialGroup()
																										.add(
																												12,
																												12,
																												12)
																										.add(
																												resultsTabbedPane,
																												0,
																												0,
																												Short.MAX_VALUE))
																						.add(
																								org.jdesktop.layout.GroupLayout.LEADING,
																								statsTabbedPane,
																								org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
																								org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
																								org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))))
										.add(20, 20, 20))
						.add(
								layout
										.createSequentialGroup()
										.add(
												messageArea,
												org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
												1163,
												org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
										.addContainerGap(34, Short.MAX_VALUE)));

		layout.linkSize(new java.awt.Component[] { newsgroupScrollPane,
				topicScrollPane }, org.jdesktop.layout.GroupLayout.HORIZONTAL);

		layout
				.setVerticalGroup(layout
						.createParallelGroup(
								org.jdesktop.layout.GroupLayout.LEADING)
						.add(
								layout
										.createSequentialGroup()
										.addContainerGap()
										.add(
												layout
														.createParallelGroup(
																org.jdesktop.layout.GroupLayout.LEADING)
														.add(
																layout
																		.createSequentialGroup()
																		.add(
																				22,
																				22,
																				22)
																		.add(
																				layout
																						.createParallelGroup(
																								org.jdesktop.layout.GroupLayout.LEADING)
																						.add(
																								layout
																										.createSequentialGroup()
																										.add(
																												layout
																														.createParallelGroup(
																																org.jdesktop.layout.GroupLayout.BASELINE)
																														.add(
																																hostLabel,
																																org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
																																15,
																																org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
																														.add(
																																hostChooser,
																																org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
																																org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
																																org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
																										.add(
																												11,
																												11,
																												11)
																										.add(
																												layout
																														.createParallelGroup(
																																org.jdesktop.layout.GroupLayout.BASELINE)
																														.add(
																																newsgroupLabel)
																														.add(
																																newsgroupDropDown,
																																org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
																																org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
																																org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
																						.add(
																								layout
																										.createSequentialGroup()
																										.add(
																												layout
																														.createParallelGroup(
																																org.jdesktop.layout.GroupLayout.BASELINE)
																														.add(
																																connectButton)
																														.add(
																																downloadButton)
																														.add(
																																pauseButton)
																														.add(
																																cancelButton))
																										.add(
																												11,
																												11,
																												11)
																										.add(
																												layout
																														.createParallelGroup(
																																org.jdesktop.layout.GroupLayout.LEADING)
																														.add(
																																org.jdesktop.layout.GroupLayout.TRAILING,
																																layout
																																		.createParallelGroup(
																																				org.jdesktop.layout.GroupLayout.BASELINE)
																																		.add(
																																				timeLeftLabel,
																																				org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
																																				19,
																																				org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
																																		.add(
																																				timeLeftField,
																																				org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
																																				org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
																																				org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
																														.add(
																																org.jdesktop.layout.GroupLayout.TRAILING,
																																downloadProgressBar,
																																org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
																																org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
																																org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))))
														.add(
																layout
																		.createSequentialGroup()
																		.add(
																				layout
																						.createParallelGroup(
																								org.jdesktop.layout.GroupLayout.BASELINE)
																						.add(
																								fromDateSpinner,
																								org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
																								org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
																								org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
																						.add(
																								dateFromLabel)
																						.add(
																								matrixAllCurrent))
																		.addPreferredGap(
																				org.jdesktop.layout.LayoutStyle.RELATED)
																		.add(
																				layout
																						.createParallelGroup(
																								org.jdesktop.layout.GroupLayout.BASELINE)
																						.add(
																								toDateSpinner,
																								org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
																								org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
																								org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
																						.add(
																								dateToLabel)
																						.add(
																								matrixFirstCurrent,
																								org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
																								15,
																								org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
																		.addPreferredGap(
																				org.jdesktop.layout.LayoutStyle.RELATED)
																		.add(
																				matrixLastCurrent)))
										.add(
												layout
														.createParallelGroup(
																org.jdesktop.layout.GroupLayout.LEADING)
														.add(
																layout
																		.createSequentialGroup()
																		.add(
																				layout
																						.createParallelGroup(
																								org.jdesktop.layout.GroupLayout.TRAILING)
																						.add(
																								layout
																										.createSequentialGroup()
																										.add(
																												14,
																												14,
																												14)
																										.add(
																												newsgroupScrollPane,
																												org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
																												303,
																												org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
																						.add(
																								org.jdesktop.layout.GroupLayout.LEADING,
																								layout
																										.createSequentialGroup()
																										.addPreferredGap(
																												org.jdesktop.layout.LayoutStyle.RELATED)
																										.add(
																												layout
																														.createParallelGroup(
																																org.jdesktop.layout.GroupLayout.LEADING)
																														.add(
																																filterButton)
																														.add(
																																topicScrollPane,
																																0,
																																0,
																																Short.MAX_VALUE))))
																		.add(
																				6,
																				6,
																				6)
																		.add(
																				layout
																						.createParallelGroup(
																								org.jdesktop.layout.GroupLayout.TRAILING)
																						.add(
																								layout
																										.createSequentialGroup()
																										.add(
																												crosspostedGroupsLabel)
																										.addPreferredGap(
																												org.jdesktop.layout.LayoutStyle.RELATED)
																										.add(
																												crossPostingScrollPane,
																												org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
																												58,
																												org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
																						.add(
																								layout
																										.createSequentialGroup()
																										.add(
																												layout
																														.createParallelGroup(
																																org.jdesktop.layout.GroupLayout.BASELINE)
																														.add(
																																subjectLabel)
																														.add(
																																subjectField,
																																org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
																																org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
																																org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
																														.add(
																																showUserButton))
																										.addPreferredGap(
																												org.jdesktop.layout.LayoutStyle.RELATED)
																										.add(
																												layout
																														.createParallelGroup(
																																org.jdesktop.layout.GroupLayout.BASELINE)
																														.add(
																																senderLabel)
																														.add(
																																senderField,
																																org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
																																19,
																																org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
																														.add(
																																refreshDataButton))
																										.addPreferredGap(
																												org.jdesktop.layout.LayoutStyle.RELATED)
																										.add(
																												layout
																														.createParallelGroup(
																																org.jdesktop.layout.GroupLayout.BASELINE)
																														.add(
																																dateLabel)
																														.add(
																																dateField,
																																org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
																																org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
																																org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
																														.add(
																																saveToPajekButton))))
																		.addPreferredGap(
																				org.jdesktop.layout.LayoutStyle.RELATED))
														.add(
																layout
																		.createSequentialGroup()
																		.add(
																				23,
																				23,
																				23)
																		.add(
																				layout
																						.createParallelGroup(
																								org.jdesktop.layout.GroupLayout.BASELINE)
																						.add(
																								postersLabel)
																						.add(
																								countriesLabel))
																		.add(
																				16,
																				16,
																				16)
																		.add(
																				layout
																						.createParallelGroup(
																								org.jdesktop.layout.GroupLayout.TRAILING)
																						.add(
																								jScrollPane2,
																								org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
																								org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
																								org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
																						.add(
																								jScrollPane1,
																								org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
																								org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
																								org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
																		.add(
																				21,
																				21,
																				21)
																		.add(
																				statsTabbedPane,
																				org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
																				202,
																				org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
																		.add(
																				8,
																				8,
																				8)))
										.add(
												layout
														.createParallelGroup(
																org.jdesktop.layout.GroupLayout.LEADING)
														.add(resultsTabbedPane,
																0, 0,
																Short.MAX_VALUE)
														.add(
																messageBodyScrollPane,
																org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
																250,
																org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
										.addPreferredGap(
												org.jdesktop.layout.LayoutStyle.RELATED)
										.add(
												messageArea,
												org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
												org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
												org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
										.addContainerGap()));

		layout.linkSize(new java.awt.Component[] { newsgroupScrollPane,
				topicScrollPane }, org.jdesktop.layout.GroupLayout.VERTICAL);

		layout.linkSize(new java.awt.Component[] { fromDateSpinner,
				toDateSpinner }, org.jdesktop.layout.GroupLayout.VERTICAL);

		layout.linkSize(
				new java.awt.Component[] { jScrollPane1, jScrollPane2 },
				org.jdesktop.layout.GroupLayout.VERTICAL);

		pack();
	}// </editor-fold>//GEN-END:initComponents

	private void crossPostingsListValueChanged(
			javax.swing.event.ListSelectionEvent evt) {// GEN-FIRST:event_crossPostingsListValueChanged
		GUIItem<NewsGroup> item = (GUIItem<NewsGroup>) crossPostingsList
				.getSelectedValue();
		controller.setSelectedNewsgroup(item.getItem());
	}// GEN-LAST:event_crossPostingsListValueChanged

	private void filterButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_filterButtonActionPerformed

		// reverse the status from filtered to non-filtered
		controller.switchFiltered();

		if (controller.isFiltered()) {
			filterButton.setText("Remove Filter");
		} else {
			filterButton.setText("  Apply Filter  ");
		}
		controller.refreshDataFromDatabase();

	}// GEN-LAST:event_filterButtonActionPerformed

	String query = "";

	private ListModel getListModel(Vector list) {
		DefaultListModel model = new DefaultListModel();
		for (ListIterator iter = list.listIterator(); iter.hasNext();) {
			Object next = iter.next();
			String name = next.toString();
			if (next instanceof UsenetUser) {
				name = ((UsenetUser) next).getName() + "<"
						+ ((UsenetUser) next).getEmail() + ">";
			} else if (next instanceof Location) {
				name = ((Location) next).getCountry();
			}

			model.addElement(new GUIItem(name, next));
		}
		return model;
	}

	private Vector getListVector(String type, String keyfield) {
		String sql = "select distinct " + keyfield + " from " + type;
		logger.warn("SQL: " + sql);
		final List results = HibernateHelper.runSQLQuery(sql);
		return new Vector(results);
	}

	private Vector getListVector(String type) {
		String sql = " from " + type;
		logger.warn("SQL: " + sql);
		final List results = HibernateHelper.runQuery(sql);
		return new Vector(results);
	}

	private void refreshPosterFilter() {
		postersList
				.setModel(getListModel(getListVector(UNISoNController.USENETUSER)));
	}

	private void newsgroupDropDownActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_newsgroupDropDownActionPerformed
		// TODO
	}// GEN-LAST:event_newsgroupDropDownActionPerformed

	/**
	 * This is the action taken when the menu item is selected
	 * 
	 * @param evt
	 */
	private void showAllSoFarMenuItemActionPerformed(
			java.awt.event.ActionEvent evt) {// GEN-FIRST:event_showAllSoFarMenuItemActionPerformed

		controller.setSelectedNewsgroup(getCurrentNewsGroupNode());
		controller.setMatrixType(MatrixType.REPLY_TO_ALL);
		refreshPajekMatrixTable();
	}// GEN-LAST:event_showAllSoFarMenuItemActionPerformed

	private Vector pajekHeader = new Vector(Arrays.asList(new String[] { "row",
			"FROM", "TO" }));

	private TableModel getPajekMatrixModel() {
		Vector tableData = getLatestPajekMatrixVector();
		DefaultTableModel model = new DefaultTableModel(tableData, pajekHeader);
		return model;
	}

	private void refreshPajekMatrixTable() {
		DefaultTableModel model = (DefaultTableModel) resultsTable.getModel();
		model.setDataVector(getLatestPajekMatrixVector(), pajekHeader);
	}

	private void refreshDateFilters() {
		toDateSpinner.setModel(getDateModel(true));

		fromDateSpinner.setModel(getDateModel(false));
	}

	private Vector getLatestPajekMatrixVector() {
		String sql = " from Message where 1=1 ";
		Object[] posters = postersList.getSelectedValues();
		if (null != posters && posters.length > 0) {
			query += " AND usenetuser_id in ( ";
			for (Object item : posters) {
				GUIItem<UsenetUser> posterItem = (GUIItem<UsenetUser>) item;
				query += posterItem.getItem().getId() + ",";
			}
			query = query.substring(0, query.length() - 1);
			query += ") ";
		}

		Query query = HibernateHelper.getHibernateSession().createQuery(sql);
		Vector<Vector<String>> tableData;
		List messages = HibernateHelper.runQuery(query);

		logger.warn("Messages" + messages);
		tableData = new Vector<Vector<String>>();
		int rowIndex = 1;
		for (ListIterator<Message> msgIter = messages.listIterator(); msgIter
				.hasNext();) {
			Message next = msgIter.next();
			Message lastMsg = null;

			List refMsgs = next.getReferencedMessages();
			int size;
			try {
				size = refMsgs.size();
			} catch (Exception e) {
				e.printStackTrace();
				size = 0;
			}
			if (null != refMsgs && size > 0) {
				if (matrixAllCurrent.isSelected()) {
					for (ListIterator<Message> iter = next
							.getReferencedMessages().listIterator(); iter
							.hasNext();) {
						tableData.add(createNewRow(rowIndex++, next, iter
								.next()));
					}
				} else {
					if (matrixFirstCurrent.isSelected()) {
						lastMsg = (Message) refMsgs.get(refMsgs.size() - 1);
					} else if (matrixLastCurrent.isSelected()) {
						lastMsg = (Message) refMsgs.get(0);
					}

				}
				tableData.add(createNewRow(rowIndex++, next, lastMsg));
			} else {
				tableData.add(createNewRow(rowIndex++, next, null));
			}

		}
		return tableData;
	}

	/**
	 * 
	 * @param rowIndex
	 * @param currentMsg
	 * @param originalMsg
	 * @return
	 */
	private Vector<String> createNewRow(int rowIndex, Message currentMsg,
			Message originalMsg) {
		String repyTo = "";

		if (null != originalMsg) {
			repyTo = originalMsg.getPoster().getEmail();
		}
		Vector<String> row = new Vector<String>();
		row.add("" + rowIndex);
		row.add(currentMsg.getPoster().getEmail());
		row.add(repyTo);
		return row;
	}

	/**
	 * This is the action taken when the menu item is selected
	 * 
	 * @param evt
	 */
	private void showAsLastVsReplierMenuItemActionPerformed(
			java.awt.event.ActionEvent evt) {// GEN-FIRST:event_showAsLastVsReplierMenuItemActionPerformed
		controller.setSelectedNewsgroup(getCurrentNewsGroupNode());
		controller.setMatrixType(MatrixType.REPLY_TO_LAST);
		refreshPajekMatrixTable();
	}// GEN-LAST:event_showAsLastVsReplierMenuItemActionPerformed

	/**
	 * This is the action taken when the menu item is selected
	 * 
	 * @param evt
	 */
	private void showAsCreatorReplierMenuItemActionPerformed(
			java.awt.event.ActionEvent evt) {// GEN-FIRST:event_showAsCreatorReplierMenuItemActionPerformed
		controller.setSelectedNewsgroup(getCurrentNewsGroupNode());
		controller.setMatrixType(MatrixType.REPLY_TO_FIRST);
		refreshPajekMatrixTable();
	}// GEN-LAST:event_showAsCreatorReplierMenuItemActionPerformed

	private void selectGroupMenuItemActionPerformed(
			java.awt.event.ActionEvent evt) {// GEN-FIRST:event_selectGroupMenuItemActionPerformed
		NewsGroup group = getCurrentNewsGroupNode();
		String name = "";
		if (null != group) {
			name = group.getFullName();
		}
		controller.connectToNewsGroup(name);
	}// GEN-LAST:event_selectGroupMenuItemActionPerformed

	private NewsGroup getCurrentNewsGroupNode() {
		NewsGroup group = null;

		TreePath path = newsGroupHiearchy.getSelectionPath();
		if (null != path) {
			TreeNode node = (TreeNode) path.getLastPathComponent();
			if (node.getUserObject() instanceof NewsGroup) {
				group = ((NewsGroup) node.getUserObject());
			}
		}
		return group;
	}

	private void newsGroupHiearchyMousePressed(java.awt.event.MouseEvent evt) {// GEN-FIRST:event_newsGroupHiearchyMousePressed
		if (evt.isPopupTrigger()) {
			newsgroupPopupMenu.show(evt.getComponent(), evt.getX(), evt.getY());
		}

	}// GEN-LAST:event_newsGroupHiearchyMousePressed

	Date currentFromDate = null;

	Date currentToDate = null;

	private Date boundDateRange(Date dateToTest, Date min, Date max,
			boolean useMinNotMax) {
		if (null == dateToTest) {
			if (useMinNotMax) {
				return min;
			} else {
				return max;
			}
		} else if (dateToTest.after(max)) {
			return max;
		} else if (dateToTest.before(min)) {
			return min;
		}
		return dateToTest;
	}

	private SpinnerDateModel getDateModel(boolean isFromDate) {
		String sql = "select MAX(datecreated) as latest, MIN(datecreated) as earliest "
				+ " from Message";
		final Object[] result = (Object[]) HibernateHelper.runSQLQuery(sql)
				.get(0);

		Date toDate = null;
		Date fromDate = null;
		Date thisDate = null;
		SpinnerDateModel model = new SpinnerDateModel();

		if (null != result[0]) {
			toDate = (Date) result[0];
			fromDate = (Date) result[1];

			if (isFromDate) {
				currentFromDate = boundDateRange(fromDate, toDate, fromDate,
						true);
				thisDate = currentFromDate;
			} else {
				currentToDate = boundDateRange(fromDate, toDate, fromDate, true);
				thisDate = currentToDate;
			}
			model = new SpinnerDateModel(thisDate, fromDate, toDate,
					Calendar.DAY_OF_WEEK_IN_MONTH);
		}

		logger.warn("getDateModel");
		return model;
	}

	private void closeABoutButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_closeABoutButtonActionPerformed
		aboutDialog.setVisible(false);
	}// GEN-LAST:event_closeABoutButtonActionPerformed

	private static final String PAJEK_NETWORK_FILE_DESCRIPTION = "Pajek Network File (.net)";

	private void saveToPajekButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_saveToPajekButtonActionPerformed
		JFileChooser chooser = new JFileChooser();
		chooser.setCurrentDirectory(new File("."));
		chooser.setFileFilter(new SimpleFileFilter(new String[] { ".net" },
				PAJEK_NETWORK_FILE_DESCRIPTION));
		// chooser
		// .setFileFilter(new SimpleFileFilter(
		// new String[] { ".ntf" },
		// NETMINER_DATA_FILE_DESCRIPTION));
		int option = chooser.showSaveDialog(this);

		if (option == JFileChooser.APPROVE_OPTION) {
			File saveFile = chooser.getSelectedFile();
			String fileName = saveFile.getAbsolutePath();
			String fileType = chooser.getFileFilter().getDescription();
			OutputFile file = null;
			if (fileType.equals(PAJEK_NETWORK_FILE_DESCRIPTION)) {
				file = new PajekNetworkFile();
			}
			file.createDirectedLinks(((DefaultTableModel) resultsTable
					.getModel()).getDataVector());
			file.saveToFile(fileName);
		} else {
			showStatus("You cancelled.");
		}

	}// GEN-LAST:event_saveToPajekButtonActionPerformed

	public Object[] getSelectedCountries() {
		return countryList.getSelectedValues();
	}

	/**
	 * Key method - this refreshes all the GUI components with fresh data from
	 * the database
	 */
	public void refreshGUIData() {
		refreshTopPostersTable();

		refreshMessagePane();
		refreshTopicHierarchy();
		refreshNewsGroupHierarchy();

		refreshPajekMatrixTable();
		refreshCountryFilter();
		refreshDateFilters();
		refreshPosterFilter();
	}

	private void refreshTopPostersTable() {

	}

	private ComboBoxModel getNewsGroupList() {
		List<NewsGroup> newsgroups = HibernateHelper.fetchBaseNewsGroups();
		Vector itemList = GUIItem.getGUIList(newsgroups);

		ComboBoxModel model = new DefaultComboBoxModel(itemList);
		return model;
	}

	private static Logger logger = Logger.getLogger("UNISoNMain");

	// TODO reinstate that topics reflect the highlighted newsgroup
	private void refreshTopicHierarchy() {
		topicRoot.removeAllChildren();

		Vector<NewsGroup> chosenGroup = new Vector<NewsGroup>();

		if (null != controller.getSelectedNewsgroup()) {
			topicRoot.setName(controller.getSelectedNewsgroup().getFullName());
			chosenGroup.add(controller.getSelectedNewsgroup());
		} else {
			topicRoot.setName("All Topics");
		}

		logger.warn("refreshTopicHierarchy " + chosenGroup);
		ListIterator<Topic> iter = controller
				.getSelectedTopicsFromDB(chosenGroup);

		while (iter.hasNext()) {
			Topic topic = iter.next();
			int lastIndex = topic.getSubject().length();

			addChildNode(topicRoot, topic, topic.getSubject().substring(0,
					lastIndex));
		}

		// This actually refreshes the tree
		((DefaultTreeModel) topicMessageHierarchy.getModel()).reload();
	}

	private void refreshDataButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_refreshDataButtonActionPerformed
		controller.refreshDataFromDatabase();
	}// GEN-LAST:event_refreshDataButtonActionPerformed

	private void showUserButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_showUserButtonActionPerformed
		// TODO add your handling code here:
	}// GEN-LAST:event_showUserButtonActionPerformed

	private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_cancelButtonActionPerformed
		controller.cancelDownload();
	}// GEN-LAST:event_cancelButtonActionPerformed

	private void pauseButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_pauseButtonActionPerformed
		// TODO add your handling code here:
	}// GEN-LAST:event_pauseButtonActionPerformed

	private void downloadButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_downloadButtonActionPerformed
		controller.downloadMessages();
	}// GEN-LAST:event_downloadButtonActionPerformed

	private void connectButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_connectButtonActionPerformed
		controller.connectToNewsGroup(newsgroupDropDown.getSelectedItem()
				.toString());
	}// GEN-LAST:event_connectButtonActionPerformed

	private void dbMagrMenuItemActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_dbMagrMenuItemActionPerformed
		DatabaseManagerSwing dbMgr = new DatabaseManagerSwing();

		dbMgr.main(DatabaseConnection.GUI_ARGS);
	}// GEN-LAST:event_dbMagrMenuItemActionPerformed

	private void reloadDataMenuItemActionPerformed(
			java.awt.event.ActionEvent evt) {// GEN-FIRST:event_reloadDataMenuItemActionPerformed
		controller.refreshDataFromDatabase();
	}// GEN-LAST:event_reloadDataMenuItemActionPerformed

	private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_exitMenuItemActionPerformed
		int response = JOptionPane.showConfirmDialog(this, "Are you sure?",
				"Exit Application", JOptionPane.YES_NO_OPTION);
		if (response == JOptionPane.YES_OPTION) {
			System.exit(0);
		}
	}// GEN-LAST:event_exitMenuItemActionPerformed

	public void showAlert(String message) {
		JOptionPane.showMessageDialog(this, message);
	}

	public void showStatus(String message) {
		messageArea.setText(message);
	}

	/**
	 * 
	 * @param connectButtonState
	 * @param downloadButtonState
	 * @param pauseButtonState
	 * @param cancelButtonState
	 */
	public void setButtonState(boolean connectButtonState,
			boolean downloadButtonState, boolean pauseButtonState,
			boolean cancelButtonState) {
		downloadButton.setEnabled(downloadButtonState);
		cancelButton.setEnabled(cancelButtonState);
		pauseButton.setEnabled(pauseButtonState);
		connectButton.setEnabled(connectButtonState);

	}

	public void showErrorMessage(String message) {
		JOptionPane.showMessageDialog(this, message);
		messageArea.setText(message);
	}

	private void deleteDBMenuItemActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_deleteDBMenuItemActionPerformed
		int response = JOptionPane.showConfirmDialog(this,
				"This will delete ALL the data. Are you sure?", "DB Refresh",
				JOptionPane.YES_NO_OPTION);
		switch (response) {
		case JOptionPane.YES_OPTION:
			HibernateHelper.generateSchema();
			showAlert("DB refresh complete");
			controller.refreshDataFromDatabase();
			break;
		default:
			showAlert("DB refresh cancelled");
		}

	}// GEN-LAST:event_deleteDBMenuItemActionPerformed

	private void aboutMenuItemActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_aboutMenuItemActionPerformed
		aboutDialog.setSize(new Dimension(330, 265));
		aboutDialog.setVisible(true);
	}// GEN-LAST:event_aboutMenuItemActionPerformed

	private void topicMessageHierarchyValueChanged(
			javax.swing.event.TreeSelectionEvent evt) {// GEN-FIRST:event_topicMessageHierarchyValueChanged
		TreePath tp = evt.getPath();
		TreeNode root = (TreeNode) tp.getLastPathComponent();

		Object datanode = root.getUserObject();
		if (datanode instanceof Message) {
			Message msg = (Message) datanode;
			controller.setSelectedMessage(msg);
			notifySelectedMessageObservers();
		} else {
			expandNode(root);
		}
	}// GEN-LAST:event_topicMessageHierarchyValueChanged

	protected void expandNode(TreeNode root) {

		Object userObject = root.getUserObject();
		if (userObject instanceof NewsGroup) {
			NewsGroup group = (NewsGroup) userObject;

			addChildren(HibernateHelper.getChildNewsGroups(group), root);
		} else if (userObject instanceof Set) {
			addChildren((Set) userObject, root);
		} else if (userObject instanceof Message) {
			Message message = (Message) userObject;
		} else if (userObject instanceof Topic) {
			Topic topic = (Topic) userObject;
			createMessageHierarchy(HibernateHelper.getMessages(topic), root,
					"ROOT");
		}
	}

	private List<Message> createMessageHierarchy(List<Message> list,
			TreeNode root, Object matchId) {
		ArrayList<TreeNode> matches = new ArrayList<TreeNode>();
		ArrayList<Message> copy = new ArrayList<Message>(list);

		for (ListIterator<Message> iter = list.listIterator(); iter.hasNext();) {
			Message next = iter.next();

			// compare to the last refered message, ie. the one they replied to
			String previousId = "ROOT";
			try {
				if (next.getReferencedMessages().size() > 0) {
					previousId = ((Message) next.getReferencedMessages().get(0))
							.getUsenetMessageID();
				}
			} catch (ObjectNotFoundException e) {
				e.printStackTrace();
			}

			// if it matches then it refers to previous so add as a child to
			// previous
			if (previousId.equals(matchId)) {
				TreeNode child = addChildNode(root, next);
				matches.add(child);
				copy.remove(next);
			}
		}
		List<Message> remainder = new ArrayList<Message>(copy);
		for (ListIterator<TreeNode> iter = matches.listIterator(); iter
				.hasNext();) {
			TreeNode next = iter.next();
			remainder = createMessageHierarchy(remainder, next, ((Message) next
					.getUserObject()).getUsenetMessageID());
		}
		return copy;
	}

	private TreeNode topicRoot;

	private void addChildren(List<?> list, TreeNode msgRoot) {
		if (null != list && list.size() > 0) {
			iterateCollection(list.iterator(), msgRoot);
		}
	}

	@SuppressWarnings("unchecked")
	private void addChildren(Set set, TreeNode msgRoot) {
		if (null != set) {
			iterateCollection(set.iterator(), msgRoot);
		}
	}

	private TableModel getTopGroupsModel() {
		DefaultTableModel model = new DefaultTableModel();
		model.setDataVector(controller.getTopGroupsVector(), groupsHeading);
		return model;
	}

	private TableModel getTopPostersModel() {
		DefaultTableModel model = new DefaultTableModel();
		model.setDataVector(controller.getTopPostersVector(), postersHeading);
		return model;
	}

	private Vector groupsHeading = new Vector(Arrays.asList(new String[] {
			"NewsGroup", "Number of Posts" }));

	private Vector postersHeading = new Vector(Arrays.asList(new String[] {
			"Poster", "Number of Posts" }));

	private void iterateCollection(Iterator<?> iter2, TreeNode msgRoot) {
		while (iter2.hasNext()) {
			Object object = iter2.next();
			addChildNode(msgRoot, object);
		}
	}

	public void notifySelectedNewsGroupObservers() {
		refreshTopicHierarchy();
		newsgroupDropDown.setSelectedItem(controller.getSelectedNewsgroup()
				.getFullName());

	}

	public void notifySelectedMessageObservers() {
		refreshMessagePane();
	}

	public void refreshMessagePane() {
		Message message = controller.getSelectedMessage();

		if (null != message) {
			DefaultListModel model = getCrossPostsModel(message);
			crossPostingsList.setModel(model);

			subjectField.setText(message.getSubject());
			senderField.setText(message.getPoster().getEmail());
			dateField.setText(message.getDateCreated().toGMTString());
			try {
				messageBodyTextArea.setText(StringUtils.decompress(message
						.getMessageBody()));
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
	}

	private DefaultListModel getCrossPostsModel(final Message message) {
		DefaultListModel model = new DefaultListModel();
		if (null != message) {
			for (Iterator<NewsGroup> iter = message.getNewsgroups().iterator(); iter
					.hasNext();) {
				NewsGroup next = iter.next();
				model.addElement(new GUIItem<NewsGroup>(next.getFullName(),
						next));
			}
		}
		return model;

	}

	private void refreshCountryFilter() {
		DefaultListModel model = (DefaultListModel) countryList.getModel();
		model.removeAllElements();
		for (Object country : getListVector(UNISoNController.LOCATION,
				"country")) {

			model.addElement(country);
			if (null != controller.getCountriesFilter()
					&& controller.getCountriesFilter().contains(
							country.toString())) {
				countryList.setSelectedValue(country, true);
			}
		}
	}

	public String getSelectedHost() {
		String host = hostChooser.getValue().toString();
		return host;
	}

	/**
	 * 
	 * @param group
	 */
	public void setSelectedNewsgroup(NewsGroup group) {
		if (null != group) {
			notifySelectedNewsGroupObservers();
		}
	}

	private void newsGroupHiearchyValueChanged(
			javax.swing.event.TreeSelectionEvent evt) {// GEN-FIRST:event_newsGroupHiearchyValueChanged
		TreePath tp = evt.getPath();
		TreeNode root = (TreeNode) tp.getLastPathComponent();

		// as root is not a newsgroup
		if (root.getUserObject() instanceof NewsGroup) {
			controller.setSelectedNewsgroup((NewsGroup) root.getUserObject());
		} else {
			controller.setSelectedNewsgroup("");
		}

		expandNode(root);
	}// GEN-LAST:event_newsGroupHiearchyValueChanged

	public Object[] getSelectedPosters() {
		return postersList.getSelectedValues();
	}

	protected TreeNode addChildNode(TreeNode root, Object childObject) {
		return addChildNode(root, childObject, "");
	}

	protected TreeNode addChildNode(TreeNode root, Object childObject,
			String name) {
		if (childObject instanceof Set<?>) {
			if (((Set<?>) childObject).size() == 0) {
				// if no entries then don't add it
				return null;
			}
		} else if (childObject instanceof String) {
			name += " : " + childObject;
		} else {
			name += HibernateHelper.getText(childObject);
		}

		TreeNode child = new TreeNode(childObject, name);
		root.add(child);

		return child;
	}

	TreeNode newsgroupTreeRoot;

	protected void refreshNewsGroupHierarchy() {
		newsgroupTreeRoot.removeAllChildren();

		ListIterator<NewsGroup> iter = controller.getTopNewsGroups()
				.listIterator();
		while (iter.hasNext()) {
			NewsGroup group = iter.next();
			addChildNode(newsgroupTreeRoot, group);
		}
		// This actually refreshes the tree
		((DefaultTreeModel) newsGroupHiearchy.getModel()).reload();
	}

	// <editor-fold defaultstate="collapsed" desc=" Variables ">
	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JDialog aboutDialog;

	private javax.swing.JMenuItem aboutMenuItem;

	private javax.swing.JButton cancelButton;

	private javax.swing.JButton closeABoutButton;

	private javax.swing.JButton connectButton;

	private javax.swing.JLabel countriesLabel;

	private javax.swing.JList countryList;

	private javax.swing.JScrollPane crossPostingScrollPane;

	private javax.swing.JList crossPostingsList;

	private javax.swing.JLabel crosspostedGroupsLabel;

	private javax.swing.JTextField dateField;

	private javax.swing.JLabel dateFromLabel;

	private javax.swing.JLabel dateLabel;

	private javax.swing.JLabel dateToLabel;

	private javax.swing.JMenuItem dbMagrMenuItem;

	private javax.swing.JMenuItem deleteDBMenuItem;

	private javax.swing.JButton downloadButton;

	private javax.swing.JProgressBar downloadProgressBar;

	private javax.swing.JMenuItem exitMenuItem;

	private javax.swing.JMenu fileMenu;

	private javax.swing.JButton filterButton;

	private javax.swing.JSpinner fromDateSpinner;

	private javax.swing.JPanel graphicPanel;

	private javax.swing.JMenu helpMenu;

	private javax.swing.JSpinner hostChooser;

	private javax.swing.JLabel hostLabel;

	private javax.swing.JLabel jLabel1;

	private javax.swing.JLabel jLabel2;

	private javax.swing.JLabel jLabel3;

	private javax.swing.JLabel jLabel4;

	private javax.swing.JLabel jLabel5;

	private javax.swing.JLabel jLabel6;

	private javax.swing.JLabel jLabel7;

	private javax.swing.JScrollPane jScrollPane1;

	private javax.swing.JScrollPane jScrollPane2;

	private javax.swing.JSeparator jSeparator1;

	private javax.swing.JSeparator jSeparator2;

	private javax.swing.JRadioButton matrixAllCurrent;

	private javax.swing.JRadioButton matrixFirstCurrent;

	private javax.swing.ButtonGroup matrixGroup;

	private javax.swing.JRadioButton matrixLastCurrent;

	private javax.swing.JMenuBar menuBar;

	private javax.swing.JTextField messageArea;

	private javax.swing.JScrollPane messageBodyScrollPane;

	private javax.swing.JTextArea messageBodyTextArea;

	private javax.swing.JTree newsGroupHiearchy;

	private javax.swing.JComboBox newsgroupDropDown;

	private javax.swing.JLabel newsgroupLabel;

	private javax.swing.JPopupMenu newsgroupPopupMenu;

	private javax.swing.JScrollPane newsgroupScrollPane;

	private javax.swing.JButton pauseButton;

	private javax.swing.JLabel postersLabel;

	private javax.swing.JList postersList;

	private javax.swing.JButton refreshDataButton;

	private javax.swing.JMenuItem reloadDataMenuItem;

	private javax.swing.JTabbedPane resultsTabbedPane;

	private javax.swing.JTable resultsTable;

	private javax.swing.JScrollPane resultsTableScrollPane;

	private javax.swing.JButton saveToPajekButton;

	private javax.swing.JMenuItem selectGroupMenuItem;

	private javax.swing.JTextField senderField;

	private javax.swing.JLabel senderLabel;

	private javax.swing.JMenuItem showAllSoFarMenuItem;

	private javax.swing.JMenuItem showAsCreatorReplierMenuItem;

	private javax.swing.JMenuItem showAsLastVsReplierMenuItem;

	private javax.swing.JButton showUserButton;

	private javax.swing.JTabbedPane statsTabbedPane;

	private javax.swing.JTextField subjectField;

	private javax.swing.JLabel subjectLabel;

	private javax.swing.JTextField timeLeftField;

	private javax.swing.JLabel timeLeftLabel;

	private javax.swing.JSpinner toDateSpinner;

	private javax.swing.JScrollPane topGroupsScrollPane;

	private javax.swing.JTable topGroupsTable;

	private javax.swing.JScrollPane topPostersScrollPane;

	private javax.swing.JTable topPostersTable;

	private javax.swing.JTree topicMessageHierarchy;

	private javax.swing.JScrollPane topicScrollPane;
	// End of variables declaration//GEN-END:variables
	// </editor-fold>
}
