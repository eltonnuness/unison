/*
 * MessageStoreViewer.java
 *
 * Created on 28 November 2007, 09:04
 */

package uk.co.sleonard.unison.gui.generated;

import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.ListIterator;
import java.util.Observable;
import java.util.Observer;
import java.util.Set;
import java.util.Vector;

import javax.swing.DefaultListModel;
import javax.swing.ListModel;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreePath;

import org.apache.log4j.Logger;
import org.hibernate.ObjectNotFoundException;

import uk.co.sleonard.unison.datahandling.DAO.Location;
import uk.co.sleonard.unison.datahandling.DAO.Message;
import uk.co.sleonard.unison.datahandling.DAO.NewsGroup;
import uk.co.sleonard.unison.datahandling.DAO.ResultRow;
import uk.co.sleonard.unison.datahandling.DAO.Topic;
import uk.co.sleonard.unison.datahandling.DAO.UsenetUser;
import uk.co.sleonard.unison.gui.DataQuery;
import uk.co.sleonard.unison.gui.GUIItem;
import uk.co.sleonard.unison.gui.TreeNode;
import uk.co.sleonard.unison.gui.UNISoNController;
import uk.co.sleonard.unison.utils.StringUtils;

/**
 * 
 * @author Steve
 */
public class MessageStoreViewer extends javax.swing.JPanel implements Observer {

	@Override
	public void update(Observable observable, Object arg1) {
//		if (observable instanceof UNISoNController) {
//			UNISoNController controller = (UNISoNController) observable;
			refreshGUIData();
//		}
	}

	/**
	 * 
	 */
	private static final long serialVersionUID = -4431795072981463365L;
	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JTextArea bodyPane;
	private javax.swing.JScrollPane bodyScrollPane;
	private javax.swing.JComboBox crosspostComboBox;
	private javax.swing.JToggleButton filterToggle;
	private javax.swing.JButton getBodyButton;
	private javax.swing.JTree groupsHierarchy;
	private javax.swing.JScrollPane groupsScrollPane;
	private javax.swing.JButton headersButton;
	private javax.swing.JLabel jLabel1;
	private javax.swing.JLabel jLabel2;
	private javax.swing.JLabel jLabel3;
	private javax.swing.JLabel jLabel4;
	private javax.swing.JLabel jLabel5;
	private javax.swing.JLabel jLabel6;
	private javax.swing.JLabel jLabel7;
	private javax.swing.JTextField jTextField5;
	private javax.swing.JTextField jTextField6;
	private javax.swing.JTextField locationField;
	private javax.swing.JCheckBox missingMessagesCheck;
	private javax.swing.JButton refreshButton;
	private javax.swing.JTextField senderField;
	private javax.swing.JTextField sentDateField;
	private javax.swing.JTabbedPane statsTabPane;
	private javax.swing.JTextField subjectField;
	private javax.swing.JList topCountriesList;
	private javax.swing.JScrollPane topCountriesScrollPane;
	private javax.swing.JList topGroupsList;
	private javax.swing.JScrollPane topGroupsScrollPane;
	private javax.swing.JList topPostersList;
	private javax.swing.JScrollPane topPostersScrollPane;
	private javax.swing.JTree topicsHierarchy;
	private javax.swing.JScrollPane topicsScrollPane;

	// End of variables declaration//GEN-END:variables
	/** Creates new form MessageStoreViewer */
	public MessageStoreViewer() {
		this.initComponents();

		refreshGUIData();
		
		//FIXME disable all non-workng parts
		topCountriesScrollPane.setVisible(false);
		crosspostComboBox.setVisible(false);
		headersButton.setVisible(false);
		getBodyButton.setVisible(false);
		filterToggle.setVisible(false);
		locationField.setVisible(false);
		missingMessagesCheck.setVisible(false);
		jLabel4.setVisible(false);
		jLabel5.setVisible(false);
		statsTabPane.remove(topCountriesScrollPane);
		//dates
		jTextField5.setEditable(false);
		jTextField6.setEditable(false);
		
		
	}

	// My variables
	private TreeNode newsgroupTreeRoot;
	private TreeNode topicRoot;

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	// <editor-fold defaultstate="collapsed" desc=" Generated Code
	// <editor-fold defaultstate="collapsed" desc=" Generated Code
	// <editor-fold defaultstate="collapsed" desc=" Generated Code
	// <editor-fold defaultstate="collapsed" desc=" Generated Code
	// ">//GEN-BEGIN:initComponents
	private void initComponents() {
		groupsScrollPane = new javax.swing.JScrollPane();
		this.newsgroupTreeRoot = new TreeNode(null,
				"NewsGroups                                 ");
		groupsHierarchy = new javax.swing.JTree(this.newsgroupTreeRoot);
		bodyScrollPane = new javax.swing.JScrollPane();
		bodyPane = new javax.swing.JTextArea();
		topicsScrollPane = new javax.swing.JScrollPane();
		topicRoot = new TreeNode(null, "Topics");
		topicsHierarchy = new javax.swing.JTree(this.topicRoot);
		jLabel1 = new javax.swing.JLabel();
		jLabel3 = new javax.swing.JLabel();
		senderField = new javax.swing.JTextField();
		sentDateField = new javax.swing.JTextField();
		jLabel2 = new javax.swing.JLabel();
		subjectField = new javax.swing.JTextField();
		jLabel4 = new javax.swing.JLabel();
		locationField = new javax.swing.JTextField();
		crosspostComboBox = new javax.swing.JComboBox();
		jLabel5 = new javax.swing.JLabel();
		statsTabPane = new javax.swing.JTabbedPane();
		topPostersScrollPane = new javax.swing.JScrollPane();
		topPostersList = new javax.swing.JList();
		topGroupsScrollPane = new javax.swing.JScrollPane();
		topGroupsList = new javax.swing.JList();
		topCountriesScrollPane = new javax.swing.JScrollPane();
		topCountriesList = new javax.swing.JList();
		jLabel6 = new javax.swing.JLabel();
		jLabel7 = new javax.swing.JLabel();
		jTextField5 = new javax.swing.JTextField();
		jTextField6 = new javax.swing.JTextField();
		missingMessagesCheck = new javax.swing.JCheckBox();
		refreshButton = new javax.swing.JButton();
		getBodyButton = new javax.swing.JButton();
		headersButton = new javax.swing.JButton();
		filterToggle = new javax.swing.JToggleButton();

		setPreferredSize(new java.awt.Dimension(461, 281));
		groupsHierarchy
				.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
					public void valueChanged(
							javax.swing.event.TreeSelectionEvent evt) {
						groupsHierarchyValueChanged(evt);
					}
				});

		groupsScrollPane.setViewportView(groupsHierarchy);

		bodyPane.setColumns(20);
		bodyPane.setEditable(false);
		bodyPane.setRows(5);
		bodyScrollPane.setViewportView(bodyPane);

		topicsHierarchy.setAutoscrolls(true);
		topicsHierarchy
				.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
					public void valueChanged(
							javax.swing.event.TreeSelectionEvent evt) {
						topicsHierarchyValueChanged(evt);
					}
				});

		topicsScrollPane.setViewportView(topicsHierarchy);

		jLabel1.setText("Sender");

		jLabel3.setText("Sent Date");

		senderField.setEditable(false);

		sentDateField.setEditable(false);

		jLabel2.setText("Subject");

		subjectField.setEditable(false);

		jLabel4.setText("Location");

		locationField.setEditable(false);

		crosspostComboBox.setModel(new javax.swing.DefaultComboBoxModel(
				new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
		crosspostComboBox
				.addActionListener(new java.awt.event.ActionListener() {
					public void actionPerformed(java.awt.event.ActionEvent evt) {
						crosspostComboBoxActionPerformed(evt);
					}
				});

		jLabel5.setText("CrossPosts");

		topPostersList.setModel(new javax.swing.AbstractListModel() {
			/**
			 * 
			 */
			private static final long serialVersionUID = -2776782994543743137L;
			String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4",
					"Item 5" };

			public int getSize() {
				return strings.length;
			}

			public Object getElementAt(int i) {
				return strings[i];
			}
		});
		topPostersList
				.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
					public void valueChanged(
							javax.swing.event.ListSelectionEvent evt) {
						topPostersListValueChanged(evt);
					}
				});

		topPostersScrollPane.setViewportView(topPostersList);

		statsTabPane.addTab(" Posters", topPostersScrollPane);

		topGroupsList.setModel(new javax.swing.AbstractListModel() {
			/**
			 * 
			 */
			private static final long serialVersionUID = -4433783837957734752L;
			String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4",
					"Item 5" };

			public int getSize() {
				return strings.length;
			}

			public Object getElementAt(int i) {
				return strings[i];
			}
		});
		topGroupsList
				.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
					public void valueChanged(
							javax.swing.event.ListSelectionEvent evt) {
						topGroupsListValueChanged(evt);
					}
				});

		topGroupsScrollPane.setViewportView(topGroupsList);

		statsTabPane.addTab("Groups", topGroupsScrollPane);

		topCountriesList.setModel(new javax.swing.AbstractListModel() {
			/**
			 * 
			 */
			private static final long serialVersionUID = 6132024672457195725L;
			String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4",
					"Item 5" };

			public int getSize() {
				return strings.length;
			}

			public Object getElementAt(int i) {
				return strings[i];
			}
		});
		topCountriesList
				.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
					public void valueChanged(
							javax.swing.event.ListSelectionEvent evt) {
						topCountriesListValueChanged(evt);
					}
				});

		topCountriesScrollPane.setViewportView(topCountriesList);

		statsTabPane.addTab("Countries", topCountriesScrollPane);

		jLabel6.setText("Date from : ");

		jLabel7.setText("Date To:");

		missingMessagesCheck.setText("Show Missing Messages");
		missingMessagesCheck.setBorder(javax.swing.BorderFactory
				.createEmptyBorder(0, 0, 0, 0));
		missingMessagesCheck.setMargin(new java.awt.Insets(0, 0, 0, 0));
		missingMessagesCheck.addItemListener(new java.awt.event.ItemListener() {
			public void itemStateChanged(java.awt.event.ItemEvent evt) {
				missingMessagesCheckItemStateChanged(evt);
			}
		});

		refreshButton.setText("Refresh Data");
		refreshButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				refreshButtonActionPerformed(evt);
			}
		});

		getBodyButton.setText("Get Body");
		getBodyButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				getBodyButtonActionPerformed(evt);
			}
		});

		headersButton.setText("Headers");
		headersButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				headersButtonActionPerformed(evt);
			}
		});

		filterToggle.setText("Filter");

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
		this.setLayout(layout);
		layout
				.setHorizontalGroup(layout
						.createParallelGroup(
								javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(
								javax.swing.GroupLayout.Alignment.TRAILING,
								layout
										.createSequentialGroup()
										.addGroup(
												layout
														.createParallelGroup(
																javax.swing.GroupLayout.Alignment.LEADING,
																false)
														.addComponent(
																topicsScrollPane,
																javax.swing.GroupLayout.DEFAULT_SIZE,
																179,
																Short.MAX_VALUE)
														.addComponent(
																groupsScrollPane,
																javax.swing.GroupLayout.DEFAULT_SIZE,
																179,
																Short.MAX_VALUE))
										.addPreferredGap(
												javax.swing.LayoutStyle.ComponentPlacement.RELATED)
										.addGroup(
												layout
														.createParallelGroup(
																javax.swing.GroupLayout.Alignment.LEADING,
																false)
														.addGroup(
																layout
																		.createSequentialGroup()
																		.addGroup(
																				layout
																						.createParallelGroup(
																								javax.swing.GroupLayout.Alignment.LEADING)
																						.addComponent(
																								jLabel2)
																						.addComponent(
																								jLabel4)
																						.addComponent(
																								jLabel3)
																						.addComponent(
																								jLabel1)
																						.addComponent(
																								jLabel5))
																		.addPreferredGap(
																				javax.swing.LayoutStyle.ComponentPlacement.RELATED)
																		.addGroup(
																				layout
																						.createParallelGroup(
																								javax.swing.GroupLayout.Alignment.LEADING,
																								false)
																						.addComponent(
																								crosspostComboBox,
																								0,
																								javax.swing.GroupLayout.DEFAULT_SIZE,
																								Short.MAX_VALUE)
																						.addComponent(
																								locationField)
																						.addComponent(
																								senderField)
																						.addComponent(
																								sentDateField)
																						.addComponent(
																								subjectField,
																								javax.swing.GroupLayout.DEFAULT_SIZE,
																								118,
																								Short.MAX_VALUE)))
														.addComponent(
																bodyScrollPane,
																javax.swing.GroupLayout.DEFAULT_SIZE,
																175,
																Short.MAX_VALUE))
										.addPreferredGap(
												javax.swing.LayoutStyle.ComponentPlacement.RELATED)
										.addGroup(
												layout
														.createParallelGroup(
																javax.swing.GroupLayout.Alignment.LEADING,
																false)
														.addGroup(
																layout
																		.createSequentialGroup()
																		.addPreferredGap(
																				javax.swing.LayoutStyle.ComponentPlacement.RELATED)
																		.addComponent(
																				filterToggle)
																		.addPreferredGap(
																				javax.swing.LayoutStyle.ComponentPlacement.RELATED)
																		.addComponent(
																				headersButton))
														.addGroup(
																layout
																		.createSequentialGroup()
																		.addComponent(
																				statsTabPane,
																				javax.swing.GroupLayout.PREFERRED_SIZE,
																				179,
																				javax.swing.GroupLayout.PREFERRED_SIZE)
																		.addPreferredGap(
																				javax.swing.LayoutStyle.ComponentPlacement.RELATED,
																				1,
																				Short.MAX_VALUE))
														.addGroup(
																layout
																		.createSequentialGroup()
																		.addGroup(
																				layout
																						.createParallelGroup(
																								javax.swing.GroupLayout.Alignment.LEADING)
																						.addComponent(
																								jLabel7)
																						.addComponent(
																								jLabel6))
																		.addPreferredGap(
																				javax.swing.LayoutStyle.ComponentPlacement.RELATED)
																		.addGroup(
																				layout
																						.createParallelGroup(
																								javax.swing.GroupLayout.Alignment.TRAILING)
																						.addComponent(
																								jTextField6,
																								javax.swing.GroupLayout.DEFAULT_SIZE,
																								118,
																								Short.MAX_VALUE)
																						.addComponent(
																								jTextField5,
																								javax.swing.GroupLayout.Alignment.LEADING,
																								javax.swing.GroupLayout.DEFAULT_SIZE,
																								118,
																								Short.MAX_VALUE)))
														.addComponent(
																missingMessagesCheck)
														.addGroup(
																layout
																		.createSequentialGroup()
																		.addComponent(
																				refreshButton)
																		.addPreferredGap(
																				javax.swing.LayoutStyle.ComponentPlacement.RELATED)
																		.addComponent(
																				getBodyButton)))
										.addContainerGap()));

		layout.linkSize(javax.swing.SwingConstants.HORIZONTAL,
				new java.awt.Component[] { getBodyButton, headersButton });

		layout.linkSize(javax.swing.SwingConstants.HORIZONTAL,
				new java.awt.Component[] { filterToggle, refreshButton });

		layout.linkSize(javax.swing.SwingConstants.HORIZONTAL,
				new java.awt.Component[] { bodyScrollPane, statsTabPane,
						topicsScrollPane });

		layout
				.setVerticalGroup(layout
						.createParallelGroup(
								javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(
								layout
										.createSequentialGroup()
										.addContainerGap()
										.addGroup(
												layout
														.createParallelGroup(
																javax.swing.GroupLayout.Alignment.LEADING)
														.addComponent(
																groupsScrollPane,
																javax.swing.GroupLayout.PREFERRED_SIZE,
																142,
																javax.swing.GroupLayout.PREFERRED_SIZE)
														.addGroup(
																layout
																		.createSequentialGroup()
																		.addGroup(
																				layout
																						.createParallelGroup(
																								javax.swing.GroupLayout.Alignment.BASELINE)
																						.addComponent(
																								jLabel2)
																						.addComponent(
																								subjectField,
																								javax.swing.GroupLayout.PREFERRED_SIZE,
																								javax.swing.GroupLayout.DEFAULT_SIZE,
																								javax.swing.GroupLayout.PREFERRED_SIZE))
																		.addPreferredGap(
																				javax.swing.LayoutStyle.ComponentPlacement.RELATED)
																		.addGroup(
																				layout
																						.createParallelGroup(
																								javax.swing.GroupLayout.Alignment.BASELINE)
																						.addComponent(
																								jLabel3)
																						.addComponent(
																								sentDateField,
																								javax.swing.GroupLayout.PREFERRED_SIZE,
																								javax.swing.GroupLayout.DEFAULT_SIZE,
																								javax.swing.GroupLayout.PREFERRED_SIZE))
																		.addPreferredGap(
																				javax.swing.LayoutStyle.ComponentPlacement.RELATED)
																		.addGroup(
																				layout
																						.createParallelGroup(
																								javax.swing.GroupLayout.Alignment.BASELINE)
																						.addComponent(
																								jLabel1)
																						.addComponent(
																								senderField,
																								javax.swing.GroupLayout.PREFERRED_SIZE,
																								javax.swing.GroupLayout.DEFAULT_SIZE,
																								javax.swing.GroupLayout.PREFERRED_SIZE)
																						.addComponent(
																								missingMessagesCheck))
																		.addPreferredGap(
																				javax.swing.LayoutStyle.ComponentPlacement.RELATED)
																		.addGroup(
																				layout
																						.createParallelGroup(
																								javax.swing.GroupLayout.Alignment.BASELINE)
																						.addComponent(
																								jLabel4)
																						.addComponent(
																								locationField,
																								javax.swing.GroupLayout.PREFERRED_SIZE,
																								javax.swing.GroupLayout.DEFAULT_SIZE,
																								javax.swing.GroupLayout.PREFERRED_SIZE)
																						.addComponent(
																								headersButton)
																						.addComponent(
																								filterToggle))
																		.addPreferredGap(
																				javax.swing.LayoutStyle.ComponentPlacement.RELATED)
																		.addGroup(
																				layout
																						.createParallelGroup(
																								javax.swing.GroupLayout.Alignment.BASELINE)
																						.addComponent(
																								jLabel5)
																						.addComponent(
																								crosspostComboBox,
																								javax.swing.GroupLayout.PREFERRED_SIZE,
																								javax.swing.GroupLayout.DEFAULT_SIZE,
																								javax.swing.GroupLayout.PREFERRED_SIZE)
																						.addComponent(
																								refreshButton)
																						.addComponent(
																								getBodyButton)))
														.addGroup(
																layout
																		.createSequentialGroup()
																		.addGroup(
																				layout
																						.createParallelGroup(
																								javax.swing.GroupLayout.Alignment.BASELINE)
																						.addComponent(
																								jLabel6)
																						.addComponent(
																								jTextField5,
																								javax.swing.GroupLayout.PREFERRED_SIZE,
																								javax.swing.GroupLayout.DEFAULT_SIZE,
																								javax.swing.GroupLayout.PREFERRED_SIZE))
																		.addPreferredGap(
																				javax.swing.LayoutStyle.ComponentPlacement.RELATED)
																		.addGroup(
																				layout
																						.createParallelGroup(
																								javax.swing.GroupLayout.Alignment.BASELINE)
																						.addComponent(
																								jLabel7)
																						.addComponent(
																								jTextField6,
																								javax.swing.GroupLayout.PREFERRED_SIZE,
																								javax.swing.GroupLayout.DEFAULT_SIZE,
																								javax.swing.GroupLayout.PREFERRED_SIZE))))
										.addPreferredGap(
												javax.swing.LayoutStyle.ComponentPlacement.RELATED)
										.addGroup(
												layout
														.createParallelGroup(
																javax.swing.GroupLayout.Alignment.LEADING)
														.addComponent(
																topicsScrollPane,
																javax.swing.GroupLayout.DEFAULT_SIZE,
																122,
																Short.MAX_VALUE)
														.addComponent(
																statsTabPane,
																javax.swing.GroupLayout.DEFAULT_SIZE,
																122,
																Short.MAX_VALUE)
														.addComponent(
																bodyScrollPane,
																javax.swing.GroupLayout.DEFAULT_SIZE,
																122,
																Short.MAX_VALUE))));
	}// </editor-fold>//GEN-END:initComponents

	private List<Message> createMessageHierarchy(final List<Message> list,
			final TreeNode root, final Object matchId, boolean fillInMissing) {
		final ArrayList<TreeNode> matches = new ArrayList<TreeNode>();
		final ArrayList<Message> copy = new ArrayList<Message>(list);

		for (final ListIterator<Message> iter = list.listIterator(); iter
				.hasNext();) {
			final Message next = iter.next();

			// compare to the last refered message, ie. the one they replied to
			String previousId = "ROOT";
			try {
				List<String> msgList = StringUtils.convertStringToList(next
						.getReferencedMessages(), " ");

				if (msgList.size() > 0) {
					String lastMessageId = msgList.get(0);
					if (fillInMissing) {
						previousId = lastMessageId;

					}
					// else ignore it and add to root
				}
			} catch (final ObjectNotFoundException e) {
				e.printStackTrace();
			}

			// if it matches then it refers to previous so add as a child to
			// previous
			if (previousId.equals(matchId)) {
				final TreeNode child = this.addChildNode(root, next);
				matches.add(child);
				copy.remove(next);
			}
		}
		List<Message> remainder = new ArrayList<Message>(copy);
		for (final ListIterator<TreeNode> iter = matches.listIterator(); iter
				.hasNext();) {
			final TreeNode next = iter.next();
			remainder = this.createMessageHierarchy(remainder, next,
					((Message) next.getUserObject()).getUsenetMessageID(),
					fillInMissing);
		}
		return copy;
	}

	protected void expandNode(final TreeNode root, boolean fillInMissing) {

		final Object userObject = root.getUserObject();
		if (userObject instanceof NewsGroup) {
			final NewsGroup group = (NewsGroup) userObject;

			this.addChildren(UNISoNController.getInstance().helper()
					.getChildNewsGroups(group), root);
		} else if (userObject instanceof Set) {
			this.addChildren((Set<?>) userObject, root);
			// } else if (userObject instanceof Message) {
			// Message message = (Message) userObject;
		} else if (userObject instanceof Topic) {
			final Topic topic = (Topic) userObject;
			this.createMessageHierarchy(UNISoNController.getInstance().helper()
					.getMessages(topic), root, "ROOT", fillInMissing);
		}
	}

	private void addChildren(final List<?> list, final TreeNode msgRoot) {
		if ((null != list) && (list.size() > 0)) {
			this.iterateCollection(list.iterator(), msgRoot);
		}
	}

	private void iterateCollection(final Iterator<?> iter2,
			final TreeNode msgRoot) {
		while (iter2.hasNext()) {
			final Object object = iter2.next();
			this.addChildNode(msgRoot, object);
		}
	}

	@SuppressWarnings("unchecked")
	private void addChildren(final Set set, final TreeNode msgRoot) {
		if (null != set) {
			this.iterateCollection(set.iterator(), msgRoot);
		}
	}

	private void topicsHierarchyValueChanged(
			javax.swing.event.TreeSelectionEvent evt) {// GEN-FIRST:event_topicsHierarchyValueChanged
		final TreePath tp = evt.getPath();
		final TreeNode root = (TreeNode) tp.getLastPathComponent();

		final Object datanode = root.getUserObject();
		if (datanode instanceof Message) {
			final Message msg = (Message) datanode;
			UNISoNController.getInstance().setSelectedMessage(msg);
			this.notifySelectedMessageObservers();
		} else {
			this.expandNode(root, this.missingMessagesCheck.isSelected());
		}
		notifySelectedMessageObservers();
	}// GEN-LAST:event_topicsHierarchyValueChanged

	public void notifySelectedMessageObservers() {
		this.refreshMessagePane();
	}

	public void refreshMessagePane() {
		final Message message = UNISoNController.getInstance()
				.getSelectedMessage();

		if (null != message) {
			// final DefaultListModel model = this.getCrossPostsModel(message);
			// this.crosspostComboBox.setModel(model);

			this.subjectField.setText(message.getSubject());
			this.subjectField.setToolTipText(message.getSubject());

			this.senderField.setText(message.getPoster().getEmail());
			this.senderField.setToolTipText(message.getPoster().getEmail());

			this.sentDateField
					.setText(new SimpleDateFormat("dd MMM yyyy hh:mm")
							.format(message.getDateCreated()));
			try {
				this.bodyPane.setText(StringUtils.decompress(message
						.getMessageBody()));
			} catch (final IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
	}

	private void refreshTopicHierarchy() {
		// TODO reinstate that topics reflect the highlighted newsgroup

		this.topicRoot.removeAllChildren();

		final Vector<NewsGroup> chosenGroup = new Vector<NewsGroup>();
		String query = "from Topic ";
		NewsGroup selectedNewsgroup = UNISoNController.getInstance()
				.getSelectedNewsgroup();
		if (null != selectedNewsgroup) {
			this.topicRoot.setName(selectedNewsgroup.getFullName());
			chosenGroup.add(selectedNewsgroup);
			query += "left join fetch newsgroups as NewsGroup "
					+ " where fullname = '" + selectedNewsgroup.getFullName()
					+ "'";
		} else {
			this.topicRoot.setName("All Topics");
		}

		logger.debug("refreshTopicHierarchy " + chosenGroup);

		// FIXME sort out the message retrieval
		Vector<?> results = DataQuery.getTopics(null, null, chosenGroup);
		Iterator<?> iter = results.iterator();
		while (iter.hasNext()) {
			final Topic topic = (Topic) iter.next();
			final int lastIndex = topic.getSubject().length();

			this.addChildNode(this.topicRoot, topic, topic.getSubject()
					.substring(0, lastIndex));
		}

		// This actually refreshes the tree
		((DefaultTreeModel) this.topicsHierarchy.getModel()).reload();
	}

	private static Logger logger = Logger.getLogger("MessageStoreViewer");

	public void notifySelectedNewsGroupObservers() {
		this.refreshTopicHierarchy();
	}

	private void topCountriesListValueChanged(
			javax.swing.event.ListSelectionEvent evt) {// GEN-FIRST:event_topCountriesListValueChanged
		// TODO add your handling code here:
	}// GEN-LAST:event_topCountriesListValueChanged

	private void topGroupsListValueChanged(
			javax.swing.event.ListSelectionEvent evt) {// GEN-FIRST:event_topGroupsListValueChanged
		// TODO add your handling code here:
	}// GEN-LAST:event_topGroupsListValueChanged

	private void topPostersListValueChanged(
			javax.swing.event.ListSelectionEvent evt) {// GEN-FIRST:event_topPostersListValueChanged
		// TODO add your handling code here:
	}// GEN-LAST:event_topPostersListValueChanged

	private void refreshTopPosters() {
		String query = "SELECT u.name, count(*) as total "
				+ " FROM usenetuser u, message m "
				+ " where m.usenetuser_id = u.usenetuser_id "
				+ " group by u.name " + " order by total desc";

		Vector<ResultRow> results = UNISoNController.getInstance().helper()
				.getListResults(query, UsenetUser.class);

		this.topPostersList.setModel(this.getListModel(results));
	}

	private void refreshTopCountries() {
		String query = "SELECT u.name, count(*) as total "
				+ " FROM usenetuser u, message m "
				+ " where m.usenetuser_id = u.usenetuser_id "
				+ " group by u.name " + " order by total desc";

		Vector<ResultRow> results = UNISoNController.getInstance().helper()
				.getListResults(query, UsenetUser.class);

		this.topCountriesList.setModel(this.getListModel(results));
	}

	private void refreshTopGroups() {
		String query = "SELECT  n.fullname, count(*) as total"
				+ " FROM newsgroup n, newsgroup_topic as nt, message m "
				+ " where nt.topic_id = m.topic_id "
				+ " and n.newsgroup_id = nt.newsgroup_id "
				+ " group by n.fullname " + " order by total desc";

		Vector<ResultRow> results = UNISoNController.getInstance().helper()
				.getListResults(query, NewsGroup.class);

		this.topGroupsList.setModel(this.getListModel(results));
	}

	private ListModel getListModel(final Vector<ResultRow> list) {
		final DefaultListModel model = new DefaultListModel();
		for (final ListIterator<ResultRow> iter = list.listIterator(); iter
				.hasNext();) {
			final Object next = iter.next();
			String name = next.toString();
			if (next instanceof UsenetUser) {
				name = ((UsenetUser) next).getName() + "<"
						+ ((UsenetUser) next).getEmail() + ">";
			} else if (next instanceof Location) {
				name = ((Location) next).getCountry();
			}

			model.addElement(new GUIItem<Object>(name, next));
		}
		return model;
	}

	private void crosspostComboBoxActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_crosspostComboBoxActionPerformed
		// TODO add your handling code here:
	}// GEN-LAST:event_crosspostComboBoxActionPerformed

	private void getBodyButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_getBodyButtonActionPerformed
		// TODO add your handling code here:
	}// GEN-LAST:event_getBodyButtonActionPerformed

	private void headersButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_headersButtonActionPerformed
		// TODO add your handling code here:
	}// GEN-LAST:event_headersButtonActionPerformed

	private void refreshButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_refreshButtonActionPerformed
		refreshGUIData();
		UNISoNController.getInstance().refreshDataFromDatabase();
	}// GEN-LAST:event_refreshButtonActionPerformed

	private void missingMessagesCheckItemStateChanged(
			java.awt.event.ItemEvent evt) {// GEN-FIRST:event_missingMessagesCheckItemStateChanged
		// TODO add your handling code here:
	}// GEN-LAST:event_missingMessagesCheckItemStateChanged

	private void groupsHierarchyValueChanged(
			javax.swing.event.TreeSelectionEvent evt) {// GEN-FIRST:event_groupsHierarchyValueChanged
		final TreePath tp = evt.getPath();
		final TreeNode root = (TreeNode) tp.getLastPathComponent();

		// as root is not a newsgroup
		if (root.getUserObject() instanceof NewsGroup) {
			UNISoNController.getInstance().setSelectedNewsgroup(
					(NewsGroup) root.getUserObject());
		} else {
			final NewsGroup dummy = null;
			UNISoNController.getInstance().setSelectedNewsgroup(dummy);
		}

		this.expandNode(root, false);
		notifySelectedNewsGroupObservers();
	}// GEN-LAST:event_groupsHierarchyValueChanged

	protected TreeNode addChildNode(final TreeNode root,
			final Object childObject) {
		return this.addChildNode(root, childObject, "");
	}

	protected TreeNode addChildNode(final TreeNode root,
			final Object childObject, String name) {
		if (childObject instanceof Set<?>) {
			if (((Set<?>) childObject).size() == 0) {
				// if no entries then don't add it
				return null;
			}
		} else if (childObject instanceof String) {
			name += " : " + childObject;
		} else {
			name += UNISoNController.getInstance().helper()
					.getText(childObject);
		}

		final TreeNode child = new TreeNode(childObject, name);
		root.add(child);

		return child;
	}

	/**
	 * Key method - this refreshes all the GUI components with fresh data from
	 * the database
	 */
	public void refreshGUIData() {
		// this.refreshTopPostersTable();

		this.refreshMessagePane();
		this.refreshTopicHierarchy();
		this.refreshNewsGroupHierarchy();

		this.refreshTopCountries();
		this.refreshTopPosters();
		this.refreshTopGroups();
		
		//dates
//		jTextField5.settt
//		jTextField6.setEditable(false);

	}

	protected void refreshNewsGroupHierarchy() {
		this.newsgroupTreeRoot.removeAllChildren();

		final ListIterator<NewsGroup> iter = UNISoNController.getInstance()
				.getTopNewsGroups().listIterator();
		while (iter.hasNext()) {
			final NewsGroup group = iter.next();
			this.addChildNode(this.newsgroupTreeRoot, group);
		}
		// This actually refreshes the tree
		((DefaultTreeModel) this.groupsHierarchy.getModel()).reload();
	}

}
